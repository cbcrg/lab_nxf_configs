//
// Queues available at CRG: http://www.linux.crg.es/index.php/UGE_Batch_System#Queues
//

//
// These variables could be set on your ~/.bash_profile instead
//
env {
    TMPDIR               = '$HOME/scratch/tmp'
    SINGULARITY_CACHEDIR = 'SHOME/scratch/tmp'
}

singularity {
    enabled    = true
    autoMounts = true
}

process.shell = ['/bin/bash', '-euo', 'pipefail']

//
// Function to ensure that resource requirements don't go beyond a maximum limit
// If you have this function in your nextflow.config, either delete or comment the code below
//
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

//
// Process definition
//
process {
    beforeScript = 'module load Singularity/3.4.0'
    executor     = 'crg'
    scratch      = true

    cpus   = { check_max( 1    * task.attempt, 'cpus'   ) }
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    time   = { check_max( 2.h  * task.attempt, 'time'   ) }

    errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
    maxRetries    = 7
    maxErrors     = '-1'

    queue = { task.memory <= 120.GB && task.cpu <= 16 ? 'cn-el7': task.memory <= 256.GB && task.cpu <= 24 ? 'mem_256' : 'mem_512' }

    withLabel:process_low {
        cpus   = { check_max( 2 * task.attempt, 'cpus' ) }
        memory = { check_max( 2.GB * task.attempt, 'memory' ) }
        time   = { check_max( 2.h * task.attempt, 'time' ) }
    }

    withLabel:process_medium {
        cpus   = { check_max( 6 * task.attempt, 'cpus' ) }
        memory = { check_max( 31.GB * task.attempt, 'memory' ) }
        time   = { check_max( 8.h * task.attempt, 'time' ) }
    }

    withLabel:process_high {
        cpus   = { check_max( 12 * task.attempt, 'cpus' ) }
        memory = { check_max( 120.GB * task.attempt, 'memory' ) }
        time   = { check_max( 16.h * task.attempt, 'time' ) }
    }

    withLabel:process_long {
        time   = { check_max( 20.h * task.attempt, 'time' ) }
    }
}

params {
  max_memory = 512.GB
  max_cpus   = 48
  max_time   = 720.h
}

profiles {
    bovreg {
        process {
            // Default queue assignation
            queue = { task.time <= 6.h ? 'short-sl7': 'long-sl7' }
            clusterOptions = '-P prj007053'
        }

        params {
            max_memory = 128.GB
            max_cpus   = 16
        }
    }
}

